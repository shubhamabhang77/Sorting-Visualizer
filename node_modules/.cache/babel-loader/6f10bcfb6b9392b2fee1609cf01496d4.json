{"ast":null,"code":"import React from \"react\";\n\nfunction mergeSort(array, start, end, mainarray, animations) {\n  if (start === end) {\n    let temp = [];\n    temp.push(array[start]);\n    return temp;\n  }\n\n  let A = [];\n  let i,\n      left = [],\n      right = [];\n  let mid = Math.floor((end - start) / 2);\n  console.log(\"shbuham\")[(left, animations)] = mergeSort(array, start, start + mid, mainarray, animations);\n  [right, animations] = mergeSort(array, start + mid + 1, end, mainarray, animations);\n  A = doMerging(left, right, A, mainarray, start, end, animations);\n  return [A, animations];\n}\n\nfunction doMerging(left, right, A, mainarray, start, end, animations) {\n  let i = 0,\n      j = 0,\n      k = 0;\n  let length_left = left.length;\n  let length_right = right.length;\n\n  while (i < length_left && j < length_right) {\n    animations.push(['c', start + i, start + j]);\n    animations.push(['c', start + i, start + j]);\n\n    if (left[i] < right[j]) {\n      A.push(left[i++]);\n    } else if (left[i] >= right[j]) {\n      A.push(right[j++]);\n      animations.push(['s', start + i, start + j]);\n      animations.push(['s', start + i, start + j]);\n    }\n  }\n\n  while (i < length_left) {\n    animations.push(['c', start + i, start + j]);\n    animations.push(['c', start + i, start + j]);\n    A.push(left[i++]);\n  }\n\n  while (j < length_right) {\n    animations.push(['c', start + i, start + j]);\n    animations.push(['c', start + i, start + j]);\n    A.push(right[j++]);\n  }\n\n  return A;\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","mergeSort","array","start","end","mainarray","animations","temp","push","A","i","left","right","mid","Math","floor","console","log","doMerging","j","k","length_left","length","length_right"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nfunction mergeSort(array, start, end, mainarray, animations){\n\n\n    if(start === end){\n        let temp = []\n        temp.push(array[start])\n        return temp;\n    }\n\n    let A = [];\n    let i, left= [], right = [];\n    \n    let mid = Math.floor((end - start)/2)\n\n    console.log(\"shbuham\")\n    [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n    [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n    A = doMerging(left, right, A, mainarray, start, end, animations);\n    return [A, animations];\n}\n\n\n\nfunction doMerging(left, right, A, mainarray, start, end, animations){\n    let i = 0, j = 0, k = 0;\n    let length_left = left.length\n    let length_right = right.length\n    while(i < length_left && j < length_right){\n        animations.push(['c', start+i, start+j])\n        animations.push(['c', start+i, start+j])\n        if(left[i] < right[j]){\n            A.push(left[i++])\n        }\n        else if (left[i] >= right[j]){\n            A.push(right[j++])\n            animations.push(['s', start+i, start+j])\n            animations.push(['s', start+i, start+j])\n        }\n    } \n    while(i < length_left){\n        animations.push(['c', start+i, start+j])\n        animations.push(['c', start+i, start+j])\n        A.push(left[i++])\n    }\n    while(j < length_right){\n        animations.push(['c', start+i, start+j])\n        animations.push(['c', start+i, start+j])\n        A.push(right[j++])\n    }\n    return A;\n}\n\n\n\n\n\n\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}