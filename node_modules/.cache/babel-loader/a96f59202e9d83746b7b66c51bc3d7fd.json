{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return;\n  }\n\n  let mainarray = [];\n  mainarray = array.slice();\n  mergeSort(array, 0, array.length - 1, mainarray, animations);\n  return animations;\n}\n\nfunction mergeSort(array, start, end, mainarray, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let mid = Math.floor((end - start) / 2);\n  mergeSort(array, start, start + mid, mainarray, animations);\n  mergeSort(array, start + mid + 1, end, mainarray, animations);\n  doMerging(array, start, mid, end, mainarray, animations);\n}\n\nfunction doMerging(array, start, mid, end, mainarray, animations) {\n  let i = start;\n  let j = mid + 1;\n  let k = start;\n\n  while (i <= mid && j <= end) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (array[i] < array[j]) {\n      mainarray[k++] = array[i];\n      animations.push(['s', i, j, array[i]]);\n      animations.push(['s', i, j]);\n      i++;\n    } else if (left[i] >= right[j]) {\n      mainarray[k++] = array[j];\n      animations.push(['s', i, j, array[j]]);\n      animations.push(['s', i, j]);\n      j++;\n    }\n  }\n\n  while (i < length_left) {\n    animations.push(['s', i, j, array[i]]);\n    animations.push(['s', i, j]);\n    mainarray[k++] = array[i++];\n  }\n\n  while (j < length_right) {\n    animations.push(['s', i, j, array[j]]);\n    animations.push(['s', i, j]);\n    mainarray[k++] = array[j++];\n  }\n\n  return A;\n}\n\nexport default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","mainarray","slice","mergeSort","start","end","mid","Math","floor","doMerging","i","j","k","push","left","right","length_left","length_right","A"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let mainarray = [];\n    mainarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, mainarray, animations)\n    return animations;\n}\n\n\nfunction mergeSort(array, start, end, mainarray, animations){\n\n    if(start >= end){return}\n    \n    let mid = Math.floor((end - start)/2)\n\n    mergeSort(array, start, start+mid, mainarray, animations);\n    mergeSort(array, start+mid+1, end, mainarray, animations);\n\n    doMerging(array, start, mid, end, mainarray, animations);\n\n}\n\n\n\nfunction doMerging(array, start, mid, end, mainarray, animations){\n    let i = start\n    let j = mid+1\n    let k = start;\n\n\n\n    while(i <= mid && j <= end){\n\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(array[i] < array[j]){\n            mainarray[k++] = array[i]\n            animations.push(['s', i, j, array[i]])\n            animations.push(['s', i, j])\n            i++;\n        }\n        else if (left[i] >= right[j]){\n            mainarray[k++] = array[j]\n            animations.push(['s', i, j, array[j]])\n            animations.push(['s', i, j])\n            j++;\n        }\n    } \n    while(i < length_left){\n        animations.push(['s', i, j, array[i]])\n        animations.push(['s', i, j])\n        mainarray[k++] = array[i++]\n    }\n    while(j < length_right){\n        animations.push(['s', i, j, array[j]])\n        animations.push(['s', i, j])\n        mainarray[k++] = array[j++]\n    }\n    return A;\n}\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}