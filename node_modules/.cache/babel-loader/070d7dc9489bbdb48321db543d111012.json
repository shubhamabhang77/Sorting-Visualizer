{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return;\n  }\n\n  let mainarray = [];\n  mainarray = array.slice();\n  mergeSort(array, 0, array.length - 1, mainarray, animations);\n  return [mainarray, animations];\n}\n\nfunction mergeSort(array, start, end, mainarray, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let mid = Math.floor(start + (end - start) / 2);\n  console.log(\"mid\", mid);\n  mergeSort(array, start, mid, mainarray, animations);\n  mergeSort(array, mid + 1, end, mainarray, animations);\n  doMerging(array, start, mid, end, mainarray, animations);\n  console.log(\"after do merging\", mainarray);\n}\n\nfunction doMerging(array, start, mid, end, mainarray, animations) {\n  let i = start;\n  let j = mid + 1;\n  let k = start;\n\n  while (i <= mid && j <= end) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (array[i] <= array[j]) {\n      console.log(\"compare, i, j\", array[i], array[j]);\n      animations.push(['s', i, j, array[i]]);\n      animations.push(['s', i, j]);\n      mainarray[k++] = array[i++];\n    } else {\n      console.log(\"compare, i, j\", array[i], array[j]);\n      animations.push(['s', i, j, array[j]]);\n      animations.push(['s', i, j]);\n      mainarray[k++] = array[j++];\n    }\n  }\n\n  while (i <= mid) {\n    animations.push(['s', i, j, array[i]]);\n    animations.push(['s', i, j]);\n    mainarray[k++] = array[i++];\n  }\n\n  while (j <= end) {\n    animations.push(['s', i, j, array[j]]);\n    animations.push(['s', i, j]);\n    mainarray[k++] = array[j++];\n  }\n\n  for (let z = start; z <= end; z++) {\n    console.log(\"mainarray, z, \", z, mainarray[z]);\n  }\n}\n\nexport default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","mainarray","slice","mergeSort","start","end","mid","Math","floor","console","log","doMerging","i","j","k","push","z"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let mainarray = [];\n    mainarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, mainarray, animations)\n    return [mainarray, animations];\n}\n\n\nfunction mergeSort(array, start, end, mainarray, animations){\n\n    if(start >= end){return}\n    \n    let mid = Math.floor(start + (end - start)/2)\n    console.log(\"mid\", mid)\n    mergeSort(array, start, mid, mainarray, animations);\n    mergeSort(array, mid+1, end, mainarray, animations);\n\n    doMerging(array, start, mid, end, mainarray, animations);\n    console.log(\"after do merging\", mainarray)\n\n}\n\n\n\nfunction doMerging(array, start, mid, end, mainarray, animations){\n    let i = start\n    let j = mid+1\n    let k = start;\n\n\n    while(i <= mid && j <= end){\n\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(array[i] <= array[j]){\n            console.log(\"compare, i, j\", array[i], array[j])\n            animations.push(['s', i, j, array[i]])\n            animations.push(['s', i, j])\n            mainarray[k++] = array[i++]\n\n        }\n        else{\n            console.log(\"compare, i, j\", array[i], array[j])\n\n            animations.push(['s', i, j, array[j]])\n            animations.push(['s', i, j])\n            mainarray[k++] = array[j++]\n        }\n    } \n    while(i <= mid){\n        animations.push(['s', i, j, array[i]])\n        animations.push(['s', i, j])\n        mainarray[k++] = array[i++]\n    }\n    while(j <= end){\n        animations.push(['s', i, j, array[j]])\n        animations.push(['s', i, j])\n        mainarray[k++] = array[j++]\n    }\n\n    for(let z = start; z <= end; z++){\n        console.log(\"mainarray, z, \", z, mainarray[z])\n    }\n}\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}