{"ast":null,"code":"import React from \"react\";\n\nfunction mergeSort(array, start, end, mainarray) {\n  console.log(\"start, end \", start, end);\n\n  if (start === end) {\n    console.log(\"end element\", start, [array[start]]);\n    return [array[start]];\n  }\n\n  let A = [];\n  let animations = [];\n  let i, left, right;\n  let mid = Math.floor((end - start) / 2);\n  left = mergeSort(array, start, start + mid, mainarray);\n  right = mergeSort(array, start + mid + 1, end, mainarray);\n  console.log(left, right);\n  A = doMerging(left, right, A, mainarray, start, end, animations);\n  return A;\n}\n\nfunction doMerging(left, right, A, mainarray, start, end, animations) {\n  let i = 0,\n      j = 0,\n      k = 0;\n  let length_left = left.length;\n  let length_right = right.length; //    console.log(\"main array\", mainarray, start, end)\n  //  console.log(\"left, right \" , left, right)    \n\n  while (i < length_left && j < length_right) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (left[i] < right[j]) {\n      A.push(left[i++]);\n    } else if (left[i] >= right[j]) {\n      A.push(right[j++]);\n    }\n  }\n\n  while (i < length_left) {\n    A.push(left[i++]);\n  }\n\n  while (j < length_right) {\n    A.push(right[j++]);\n  }\n\n  return A;\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","mergeSort","array","start","end","mainarray","console","log","A","animations","i","left","right","mid","Math","floor","doMerging","j","k","length_left","length","length_right","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsCC,SAAtC,EAAgD;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,KAA3B,EAAkCC,GAAlC;;AAEA,MAAGD,KAAK,KAAKC,GAAb,EAAiB;AACbE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,KAA3B,EAAkC,CAACD,KAAK,CAACC,KAAD,CAAN,CAAlC;AACA,WAAO,CAACD,KAAK,CAACC,KAAD,CAAN,CAAP;AACH;;AAED,MAAIK,CAAC,GAAG,EAAR;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,CAAJ,EAAOC,IAAP,EAAaC,KAAb;AACA,MAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACX,GAAG,GAAGD,KAAP,IAAc,CAAzB,CAAV;AAGAQ,EAAAA,IAAI,GAAGV,SAAS,CAACC,KAAD,EAAQC,KAAR,EAAeA,KAAK,GAACU,GAArB,EAA0BR,SAA1B,CAAhB;AACAO,EAAAA,KAAK,GAAGX,SAAS,CAACC,KAAD,EAAQC,KAAK,GAACU,GAAN,GAAU,CAAlB,EAAqBT,GAArB,EAA0BC,SAA1B,CAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAAkBC,KAAlB;AACAJ,EAAAA,CAAC,GAAGQ,SAAS,CAACL,IAAD,EAAOC,KAAP,EAAcJ,CAAd,EAAiBH,SAAjB,EAA4BF,KAA5B,EAAmCC,GAAnC,EAAwCK,UAAxC,CAAb;AACA,SAAOD,CAAP;AACH;;AAID,SAASQ,SAAT,CAAmBL,IAAnB,EAAyBC,KAAzB,EAAgCJ,CAAhC,EAAmCH,SAAnC,EAA8CF,KAA9C,EAAqDC,GAArD,EAA0DK,UAA1D,EAAqE;AACjE,MAAIC,CAAC,GAAG,CAAR;AAAA,MAAWO,CAAC,GAAG,CAAf;AAAA,MAAkBC,CAAC,GAAG,CAAtB;AACA,MAAIC,WAAW,GAAGR,IAAI,CAACS,MAAvB;AACA,MAAIC,YAAY,GAAGT,KAAK,CAACQ,MAAzB,CAHiE,CAIrE;AACE;;AACE,SAAMV,CAAC,GAAGS,WAAJ,IAAmBF,CAAC,GAAGI,YAA7B,EAA0C;AACtCZ,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAAC,GAAD,EAAMZ,CAAN,EAASO,CAAT,CAAhB;AACAR,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAAC,GAAD,EAAMZ,CAAN,EAASO,CAAT,CAAhB;;AACA,QAAGN,IAAI,CAACD,CAAD,CAAJ,GAAUE,KAAK,CAACK,CAAD,CAAlB,EAAsB;AAClBT,MAAAA,CAAC,CAACc,IAAF,CAAOX,IAAI,CAACD,CAAC,EAAF,CAAX;AACH,KAFD,MAGK,IAAIC,IAAI,CAACD,CAAD,CAAJ,IAAWE,KAAK,CAACK,CAAD,CAApB,EAAwB;AACzBT,MAAAA,CAAC,CAACc,IAAF,CAAOV,KAAK,CAACK,CAAC,EAAF,CAAZ;AACH;AACJ;;AACD,SAAMP,CAAC,GAAGS,WAAV,EAAsB;AAClBX,IAAAA,CAAC,CAACc,IAAF,CAAOX,IAAI,CAACD,CAAC,EAAF,CAAX;AACH;;AACD,SAAMO,CAAC,GAAGI,YAAV,EAAuB;AACnBb,IAAAA,CAAC,CAACc,IAAF,CAAOV,KAAK,CAACK,CAAC,EAAF,CAAZ;AACH;;AACD,SAAOT,CAAP;AACH;;AAQD,eAAeP,SAAf","sourcesContent":["import React from \"react\";\n\nfunction mergeSort(array, start, end, mainarray){\n    console.log(\"start, end \", start, end)\n\n    if(start === end){\n        console.log(\"end element\", start, [array[start]])\n        return [array[start]];\n    }\n\n    let A = [];\n    let animations = [];\n    let i, left, right;\n    let mid = Math.floor((end - start)/2)\n\n\n    left = mergeSort(array, start, start+mid, mainarray);\n    right = mergeSort(array, start+mid+1, end, mainarray);\n    console.log(left, right)\n    A = doMerging(left, right, A, mainarray, start, end, animations);\n    return A;\n}\n\n\n\nfunction doMerging(left, right, A, mainarray, start, end, animations){\n    let i = 0, j = 0, k = 0;\n    let length_left = left.length\n    let length_right = right.length\n//    console.log(\"main array\", mainarray, start, end)\n  //  console.log(\"left, right \" , left, right)    \n    while(i < length_left && j < length_right){\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(left[i] < right[j]){\n            A.push(left[i++])\n        }\n        else if (left[i] >= right[j]){\n            A.push(right[j++])\n        }\n    } \n    while(i < length_left){\n        A.push(left[i++])\n    }\n    while(j < length_right){\n        A.push(right[j++])\n    }\n    return A;\n}\n\n\n\n\n\n\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}