{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let animations = [];\n//     let i, left, right;\n//     let mid = Math.floor((end - start)/2)\n//     left = mergeSort(array, start, start+mid, mainarray);\n//     right = mergeSort(array, start+mid+1, end, mainarray);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return A;\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//         }\n//     } \n//     while(i < length_left){\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction mergeSort(array, start, end, mainarray, animations) {\n  if (start < end) {\n    let mid = start + Math.floor((end - start) / 2);\n    mergeSort(array, start, mid, mainarray);\n    mergeSort(array, mid + 1, end, mainarray);\n    doMerging(array, start, mid, end, mainarray, animations);\n    console.log(\"mid\", start, mid, end);\n  }\n}\n\nfunction doMerging(array, start, mid, end, mainarray, animations) {\n  let i = 0,\n      j = 0,\n      k = 0;\n  const left = [];\n  const right = [];\n  let length_left = mid - start + 1;\n  let length_right = end - mid;\n\n  for (let u = 0; u < length_left; u++) {\n    left.push(array[start + u]);\n  }\n\n  for (let u = 0; u < length_right; u++) {\n    right.push(array[mid + 1 + u]);\n  }\n\n  array = [];\n\n  while (i < length_left && j < length_right) {\n    //      animations.push(['c', i, j])\n    //    animations.push(['c', i, j])\n    if (left[i] < right[j]) {\n      array.push(left[i++]);\n    } else if (left[i] >= right[j]) {\n      array.push(right[j++]);\n    }\n  }\n\n  while (i < length_left) {\n    array.push(left[i++]);\n  }\n\n  while (j < length_right) {\n    array.push(right[j++]);\n  }\n\n  return array;\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","mergeSort","array","start","end","mainarray","animations","mid","Math","floor","doMerging","console","log","i","j","k","left","right","length_left","length_right","u","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let animations = [];\n//     let i, left, right;\n//     let mid = Math.floor((end - start)/2)\n\n\n//     left = mergeSort(array, start, start+mid, mainarray);\n//     right = mergeSort(array, start+mid+1, end, mainarray);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return A;\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//         }\n//     } \n//     while(i < length_left){\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\n\n\n\nfunction mergeSort(array, start, end, mainarray, animations){\n\n\n    if(start < end){\n      \n        let mid = start + Math.floor((end-start)/2)\n        mergeSort(array, start, mid, mainarray);\n        mergeSort(array, mid+1, end, mainarray);\n\n        doMerging(array, start, mid, end, mainarray, animations);\n    \n        console.log(\"mid\", start, mid ,end)\n    }\n\n}\n\n\n\nfunction doMerging(array, start, mid, end, mainarray, animations){\n    let i = 0, j = 0, k = 0;\n\n\n    const left = [];\n    const right = [];\n    let length_left = mid - start + 1\n    let length_right = end - mid\n\n    for(let u = 0; u < length_left; u++){\n        left.push(array[start+u])        \n    }\n    for(let u = 0; u < length_right; u++){\n        right.push(array[mid+1+u])        \n    }\n    array = [];\n    while(i < length_left && j < length_right){\n  //      animations.push(['c', i, j])\n    //    animations.push(['c', i, j])\n        if(left[i] < right[j]){\n            array.push(left[i++])\n        }\n        else if (left[i] >= right[j]){\n            array.push(right[j++])\n        }\n    } \n    while(i < length_left){\n        array.push(left[i++])\n    }\n    while(j < length_right){\n        array.push(right[j++])\n    }\n    return array;\n}\n\n\n\n\n\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}