{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return;\n  }\n\n  let secondarray = [];\n  secomdarray = array.slice();\n  mergeSort(array, 0, array.length - 1, secondarray, animations);\n  return [mainarray, animations];\n} // function mergeSort(mainarray, start, end, array, animations){\n//     if(start >= end){return}\n//     let mid = Math.floor(start + (end - start)/2)\n//     console.log(\"mid\", mid)\n//     mergeSort(array, start, mid, mainarray, animations);\n//     mergeSort(array, mid+1, end, mainarray, animations);\n//     doMerging(mainarray, start, mid, end, array, animations);\n//     console.log(\"after do merging\", mainarray)\n// }\n// function doMerging(array, start, mid, end, mainarray, animations){\n//     let i = start\n//     let j = mid+1\n//     let k = start;\n//     while(i <= mid && j <= end){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(array[i] <= array[j]){\n//             console.log(\"compare, i, j\", array[i], array[j])\n//             animations.push(['s', i, j, array[i]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[i++]\n//         }\n//         else{\n//             console.log(\"compare, i, j\", array[i], array[j])\n//             animations.push(['s', i, j, array[j]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[j++]\n//         }\n//     } \n//     while(i <= mid){\n//         animations.push(['s', i, j, array[i]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[i++]\n//     }\n//     while(j <= end){\n//         animations.push(['s', i, j, array[j]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[j++]\n//     }\n//     for(let z = start; z <= end; z++){\n//         console.log(\"mainarray, z, \", z, mainarray[z])\n//     }\n// }\n\n\nfunction mergeSort(arr, start, end, aux, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let mid = Math.floor(start + (end - start) / 2);\n  console.log(\"mid\", mid);\n  mergeSort(arr, start, mid, aux, animations);\n  mergeSort(arr, mid + 1, end, aux, animations);\n  doMerging(arr, start, mid, end, aux, animations);\n  console.log(\"after do merging\", mainarray);\n}\n\nfunction doMerging(array, start, mid, end, mainarray, animations) {\n  let i = start;\n  let j = mid + 1;\n  let k = start;\n\n  while (i <= mid && j <= end) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (array[i] <= array[j]) {\n      console.log(\"compare, i, j\", array[i], array[j]);\n      animations.push(['s', i, j, array[i]]);\n      animations.push(['s', i, j]);\n      mainarray[k++] = array[i++];\n    } else {\n      console.log(\"compare, i, j\", array[i], array[j]);\n      animations.push(['s', i, j, array[j]]);\n      animations.push(['s', i, j]);\n      mainarray[k++] = array[j++];\n    }\n  }\n\n  while (i <= mid) {\n    animations.push(['s', i, j, array[i]]);\n    animations.push(['s', i, j]);\n    mainarray[k++] = array[i++];\n  }\n\n  while (j <= end) {\n    animations.push(['s', i, j, array[j]]);\n    animations.push(['s', i, j]);\n    mainarray[k++] = array[j++];\n  }\n\n  for (let z = start; z <= end; z++) {\n    console.log(\"mainarray, z, \", z, mainarray[z]);\n  }\n}\n\nexport default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","secondarray","secomdarray","slice","mergeSort","mainarray","arr","start","end","aux","mid","Math","floor","console","log","doMerging","i","j","k","push","z"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let secondarray = [];\n    secomdarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, secondarray, animations)\n    return [mainarray, animations];\n}\n\n\n// function mergeSort(mainarray, start, end, array, animations){\n\n//     if(start >= end){return}\n    \n//     let mid = Math.floor(start + (end - start)/2)\n//     console.log(\"mid\", mid)\n//     mergeSort(array, start, mid, mainarray, animations);\n//     mergeSort(array, mid+1, end, mainarray, animations);\n\n//     doMerging(mainarray, start, mid, end, array, animations);\n//     console.log(\"after do merging\", mainarray)\n\n// }\n\n\n\n// function doMerging(array, start, mid, end, mainarray, animations){\n//     let i = start\n//     let j = mid+1\n//     let k = start;\n\n\n//     while(i <= mid && j <= end){\n\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(array[i] <= array[j]){\n//             console.log(\"compare, i, j\", array[i], array[j])\n//             animations.push(['s', i, j, array[i]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[i++]\n\n//         }\n//         else{\n//             console.log(\"compare, i, j\", array[i], array[j])\n\n//             animations.push(['s', i, j, array[j]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[j++]\n//         }\n//     } \n//     while(i <= mid){\n//         animations.push(['s', i, j, array[i]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[i++]\n//     }\n//     while(j <= end){\n//         animations.push(['s', i, j, array[j]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[j++]\n//     }\n\n//     for(let z = start; z <= end; z++){\n//         console.log(\"mainarray, z, \", z, mainarray[z])\n//     }\n// }\n\n\n\n\nfunction mergeSort(arr, start, end, aux, animations){\n\n    if(start >= end){return}\n    \n    let mid = Math.floor(start + (end - start)/2)\n    console.log(\"mid\", mid)\n    mergeSort(arr, start, mid, aux, animations);\n    mergeSort(arr, mid+1, end, aux, animations);\n\n    doMerging(arr, start, mid, end, aux, animations);\n    console.log(\"after do merging\", mainarray)\n\n}\n\n\n\nfunction doMerging(array, start, mid, end, mainarray, animations){\n    let i = start\n    let j = mid+1\n    let k = start;\n\n\n    while(i <= mid && j <= end){\n\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(array[i] <= array[j]){\n            console.log(\"compare, i, j\", array[i], array[j])\n            animations.push(['s', i, j, array[i]])\n            animations.push(['s', i, j])\n            mainarray[k++] = array[i++]\n\n        }\n        else{\n            console.log(\"compare, i, j\", array[i], array[j])\n\n            animations.push(['s', i, j, array[j]])\n            animations.push(['s', i, j])\n            mainarray[k++] = array[j++]\n        }\n    } \n    while(i <= mid){\n        animations.push(['s', i, j, array[i]])\n        animations.push(['s', i, j])\n        mainarray[k++] = array[i++]\n    }\n    while(j <= end){\n        animations.push(['s', i, j, array[j]])\n        animations.push(['s', i, j])\n        mainarray[k++] = array[j++]\n    }\n\n    for(let z = start; z <= end; z++){\n        console.log(\"mainarray, z, \", z, mainarray[z])\n    }\n}\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}