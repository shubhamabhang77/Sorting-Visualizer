{"ast":null,"code":"import React from\"react\";// function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\nfunction getmergesortanimations(array){var animations=[];if(array.length<=1){return;}var secondarray=[];secondarray=array.slice();mergeSort(array,0,array.length-1,secondarray,animations);return[secondarray,animations];}function mergeSort(mainarray,start,end,array,animations){if(start>=end){return;}var mid=Math.floor(start+(end-start)/2);mergeSort(array,start,mid,mainarray,animations);mergeSort(array,mid+1,end,mainarray,animations);doMerging(mainarray,start,mid,end,array,animations);}function doMerging(array,start,mid,end,mainarray,animations){var i=start;var j=mid+1;var k=start;while(i<=mid&&j<=end){animations.push(['c',i,j]);animations.push(['c',i,j]);if(array[i]<=array[j]){animations.push(['s',k,array[i]]);mainarray[k++]=array[i++];}else{animations.push(['s',k,array[j]]);mainarray[k++]=array[j++];}}while(i<=mid){animations.push(['c',i,i]);animations.push(['c',i,i]);animations.push(['s',k,array[i]]);mainarray[k++]=array[i++];}while(j<=end){animations.push(['c',j,j]);animations.push(['c',j,j]);animations.push(['s',k,array[j]]);mainarray[k++]=array[j++];}}export default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","secondarray","slice","mergeSort","mainarray","start","end","mid","Math","floor","doMerging","i","j","k","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let secondarray = [];\n    secondarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, secondarray, animations)\n    return [secondarray, animations];\n}\n\n\nfunction mergeSort(mainarray, start, end, array, animations){\n\n    if(start >= end){return}\n    \n    let mid = Math.floor(start + (end - start)/2)\n    mergeSort(array, start, mid, mainarray, animations);\n    mergeSort(array, mid+1, end, mainarray, animations);\n\n    doMerging(mainarray, start, mid, end, array, animations);\n\n}\n\n\nfunction doMerging(array, start, mid, end, mainarray, animations){\n    let i = start\n    let j = mid+1\n    let k = start;\n\n    while(i <= mid && j <= end){\n\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(array[i] <= array[j]){\n            animations.push(['s', k, array[i]])\n            mainarray[k++] = array[i++]\n        }\n        else{\n            animations.push(['s', k, array[j]])\n            mainarray[k++] = array[j++]\n        }\n    } \n    while(i <= mid){\n        animations.push(['c', i, i])\n        animations.push(['c', i, i])\n        animations.push(['s', k, array[i]])\n        mainarray[k++] = array[i++]\n    }\n    while(j <= end){\n        animations.push(['c', j, j])\n        animations.push(['c', j, j])\n        animations.push(['s', k, array[j]])\n        mainarray[k++] = array[j++]\n    }\n\n\n}\n\n\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}