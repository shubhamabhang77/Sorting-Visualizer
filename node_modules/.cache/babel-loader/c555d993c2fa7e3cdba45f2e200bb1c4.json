{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return;\n  }\n\n  let secondarray = [];\n  secondarray = array.slice();\n  mergeSort(array, 0, array.length - 1, secondarray, animations);\n  return [array, animations];\n} // function mergeSort(mainarray, start, end, array, animations){\n//     if(start >= end){return}\n//     let mid = Math.floor(start + (end - start)/2)\n//     console.log(\"mid\", mid)\n//     mergeSort(array, start, mid, mainarray, animations);\n//     mergeSort(array, mid+1, end, mainarray, animations);\n//     doMerging(mainarray, start, mid, end, array, animations);\n//     console.log(\"after do merging\", mainarray)\n// }\n// function doMerging(array, start, mid, end, mainarray, animations){\n//     let i = start\n//     let j = mid+1\n//     let k = start;\n//     while(i <= mid && j <= end){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(array[i] <= array[j]){\n//             console.log(\"compare, i, j\", array[i], array[j])\n//             animations.push(['s', i, j, array[i]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[i++]\n//         }\n//         else{\n//             console.log(\"compare, i, j\", array[i], array[j])\n//             animations.push(['s', i, j, array[j]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[j++]\n//         }\n//     } \n//     while(i <= mid){\n//         animations.push(['s', i, j, array[i]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[i++]\n//     }\n//     while(j <= end){\n//         animations.push(['s', i, j, array[j]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[j++]\n//     }\n//     for(let z = start; z <= end; z++){\n//         console.log(\"mainarray, z, \", z, mainarray[z])\n//     }\n// }\n\n\nfunction mergeSort(arr, start, end, aux, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let mid = Math.floor(start + (end - start) / 2);\n  console.log(\"mid\", mid);\n  mergeSort(arr, start, mid, aux, animations);\n  mergeSort(arr, mid + 1, end, aux, animations);\n  doMerging(arr, start, mid, end, aux, animations);\n  console.log(\"after do merging\", mainarray);\n}\n\nfunction doMerging(arr, start, mid, end, aux, animations) {\n  let i = start;\n  let j = mid + 1;\n  let k = start;\n\n  while (i <= mid && j <= end) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (arr[i] <= arr[j]) {\n      // console.log(\"compare, i, j\", array[i], array[j])\n      // animations.push(['s', i, j, array[i]])\n      // animations.push(['s', i, j])\n      aux[k++] = arr[i++];\n    } else {\n      // console.log(\"compare, i, j\", array[i], array[j])\n      // animations.push(['s', i, j, array[j]])\n      animations.push(['s', i, j]);\n      aux[k++] = arr[j++];\n    }\n  }\n\n  while (i <= mid) {\n    // animations.push(['s', i, j, array[i]])\n    animations.push(['s', i, j]);\n    aux[k++] = arr[i++];\n  }\n\n  while (j <= end) {\n    // animations.push(['s', i, j, array[j]])\n    animations.push(['s', i, j]);\n    aux[k++] = arr[j++];\n  } // for(let z = start; z <= end; z++){\n  //     console.log(\"mainarray, z, \", z, mainarray[z])\n  // }\n\n}\n\nexport default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","secondarray","slice","mergeSort","arr","start","end","aux","mid","Math","floor","console","log","doMerging","mainarray","i","j","k","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let secondarray = [];\n    secondarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, secondarray, animations)\n    return [array, animations];\n}\n\n\n// function mergeSort(mainarray, start, end, array, animations){\n\n//     if(start >= end){return}\n    \n//     let mid = Math.floor(start + (end - start)/2)\n//     console.log(\"mid\", mid)\n//     mergeSort(array, start, mid, mainarray, animations);\n//     mergeSort(array, mid+1, end, mainarray, animations);\n\n//     doMerging(mainarray, start, mid, end, array, animations);\n//     console.log(\"after do merging\", mainarray)\n\n// }\n\n\n\n// function doMerging(array, start, mid, end, mainarray, animations){\n//     let i = start\n//     let j = mid+1\n//     let k = start;\n\n\n//     while(i <= mid && j <= end){\n\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(array[i] <= array[j]){\n//             console.log(\"compare, i, j\", array[i], array[j])\n//             animations.push(['s', i, j, array[i]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[i++]\n\n//         }\n//         else{\n//             console.log(\"compare, i, j\", array[i], array[j])\n\n//             animations.push(['s', i, j, array[j]])\n//             animations.push(['s', i, j])\n//             mainarray[k++] = array[j++]\n//         }\n//     } \n//     while(i <= mid){\n//         animations.push(['s', i, j, array[i]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[i++]\n//     }\n//     while(j <= end){\n//         animations.push(['s', i, j, array[j]])\n//         animations.push(['s', i, j])\n//         mainarray[k++] = array[j++]\n//     }\n\n//     for(let z = start; z <= end; z++){\n//         console.log(\"mainarray, z, \", z, mainarray[z])\n//     }\n// }\n\n\n\n\nfunction mergeSort(arr, start, end, aux, animations){\n\n    if(start >= end){return}\n    \n    let mid = Math.floor(start + (end - start)/2)\n    console.log(\"mid\", mid)\n    mergeSort(arr, start, mid, aux, animations);\n    mergeSort(arr, mid+1, end, aux, animations);\n\n    doMerging(arr, start, mid, end, aux, animations);\n    console.log(\"after do merging\", mainarray)\n\n}\n\n\n\nfunction doMerging(arr, start, mid, end, aux, animations){\n    let i = start\n    let j = mid+1\n    let k = start;\n\n\n    while(i <= mid && j <= end){\n\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(arr[i] <= arr[j]){\n            // console.log(\"compare, i, j\", array[i], array[j])\n            // animations.push(['s', i, j, array[i]])\n            // animations.push(['s', i, j])\n            aux[k++] = arr[i++]\n\n        }\n        else{\n            // console.log(\"compare, i, j\", array[i], array[j])\n\n            // animations.push(['s', i, j, array[j]])\n            animations.push(['s', i, j])\n            aux[k++] = arr[j++]\n        }\n    } \n    while(i <= mid){\n        // animations.push(['s', i, j, array[i]])\n        animations.push(['s', i, j])\n        aux[k++] = arr[i++]\n    }\n    while(j <= end){\n        // animations.push(['s', i, j, array[j]])\n        animations.push(['s', i, j])\n        aux[k++] = arr[j++]\n    }\n\n    // for(let z = start; z <= end; z++){\n    //     console.log(\"mainarray, z, \", z, mainarray[z])\n    // }\n}\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}