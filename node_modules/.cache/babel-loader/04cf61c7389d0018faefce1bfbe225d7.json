{"ast":null,"code":"function insertionSort(array, arrayBars) {\n  let temp, i, j;\n  let sorted;\n  let length = array.length;\n  const animations = [];\n\n  for (i = 1; i < length; i++) {\n    for (j = i - 1; j >= 0; j--) {\n      animations.push(['c', i, j]);\n      animations.push(['c', i, j]);\n\n      if (array[j + 1] < array[j]) {\n        animations.push(['s', i, j, array[j], array[j + 1]]);\n        animations.push(['s', i, j]);\n        temp = array[j + 1];\n        array[j + 1] = array[j];\n        array[j] = temp;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return [array, animations];\n}\n\nexport default insertionSort;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/insertionSort.jsx"],"names":["insertionSort","array","arrayBars","temp","i","j","sorted","length","animations","push"],"mappings":"AACA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAwC;AACpC,MAAIC,IAAJ,EAAUC,CAAV,EAAaC,CAAb;AACA,MAAIC,MAAJ;AACA,MAAIC,MAAM,GAAGN,KAAK,CAACM,MAAnB;AACA,QAAMC,UAAU,GAAG,EAAnB;;AAGA,OAAIJ,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGG,MAAf,EAAuBH,CAAC,EAAxB,EAA2B;AACvB,SAAIC,CAAC,GAAGD,CAAC,GAAC,CAAV,EAAaC,CAAC,IAAI,CAAlB,EAAqBA,CAAC,EAAtB,EAAyB;AAErBG,MAAAA,UAAU,CAACC,IAAX,CAAgB,CAAC,GAAD,EAAML,CAAN,EAASC,CAAT,CAAhB;AACAG,MAAAA,UAAU,CAACC,IAAX,CAAgB,CAAC,GAAD,EAAML,CAAN,EAASC,CAAT,CAAhB;;AAEA,UAAGJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,GAAaJ,KAAK,CAACI,CAAD,CAArB,EAAyB;AACrBG,QAAAA,UAAU,CAACC,IAAX,CAAgB,CAAC,GAAD,EAAML,CAAN,EAASC,CAAT,EAAYJ,KAAK,CAACI,CAAD,CAAjB,EAAsBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAA3B,CAAhB;AACAG,QAAAA,UAAU,CAACC,IAAX,CAAgB,CAAC,GAAD,EAAML,CAAN,EAASC,CAAT,CAAhB;AAEAF,QAAAA,IAAI,GAAGF,KAAK,CAACI,CAAC,GAAC,CAAH,CAAZ;AACAJ,QAAAA,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,GAAaJ,KAAK,CAACI,CAAD,CAAlB;AACAJ,QAAAA,KAAK,CAACI,CAAD,CAAL,GAAWF,IAAX;AACH,OAPD,MAQI;AACA;AACH;AACJ;AACJ;;AACD,SAAO,CAACF,KAAD,EAAQO,UAAR,CAAP;AACH;;AAID,eAAeR,aAAf","sourcesContent":["\nfunction insertionSort(array, arrayBars){\n    let temp, i, j;\n    let sorted;\n    let length = array.length\n    const animations = [];\n\n    \n    for(i = 1; i < length; i++){\n        for(j = i-1; j >= 0; j--){\n            \n            animations.push(['c', i, j])\n            animations.push(['c', i, j])\n\n            if(array[j+1] < array[j]){\n                animations.push(['s', i, j, array[j], array[j+1]])\n                animations.push(['s', i, j])\n            \n                temp = array[j+1]\n                array[j+1] = array[j]\n                array[j] = temp;            \n            }\n            else{\n                break\n            }\n        }\n    }\n    return [array, animations];\n}\n\n\n\nexport default insertionSort;"]},"metadata":{},"sourceType":"module"}