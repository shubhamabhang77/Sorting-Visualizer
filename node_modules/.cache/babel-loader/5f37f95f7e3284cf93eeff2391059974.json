{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return;\n  }\n\n  let mainarray = [];\n  mainarray = array.slice();\n  mergeSort(array, 0, array.length - 1, mainarray, animations);\n  return animations;\n}\n\nfunction mergeSort(array, start, end, mainarray, animations) {\n  if (start >= end) {\n    return;\n  }\n\n  let mid = Math.floor((end - start) / 2)[(left, animations)] = mergeSort(array, start, start + mid, mainarray, animations);\n  [right, animations] = mergeSort(array, start + mid + 1, end, mainarray, animations);\n  A = doMerging(left, right, A, mainarray, start, end, animations);\n  return [A, animations];\n}\n\nfunction doMerging(left, right, A, mainarray, start, end, animations) {\n  let i = 0,\n      j = 0,\n      k = 0;\n  let length_left = left.length;\n  let length_right = right.length;\n\n  while (i < length_left && j < length_right) {\n    animations.push(['c', start + i, start + j]);\n    animations.push(['c', start + i, start + j]);\n\n    if (left[i] < right[j]) {\n      A.push(left[i++]);\n    } else if (left[i] >= right[j]) {\n      A.push(right[j++]);\n      animations.push(['s', start + i, start + j]);\n      animations.push(['s', start + i, start + j]);\n    }\n  }\n\n  while (i < length_left) {\n    animations.push(['c', start + i, start + j]);\n    animations.push(['c', start + i, start + j]);\n    A.push(left[i++]);\n  }\n\n  while (j < length_right) {\n    animations.push(['c', start + i, start + j]);\n    animations.push(['c', start + i, start + j]);\n    A.push(right[j++]);\n  }\n\n  return A;\n}\n\nexport default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","mainarray","slice","mergeSort","start","end","mid","Math","floor","left","right","A","doMerging","i","j","k","length_left","length_right","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let mainarray = [];\n    mainarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, mainarray, animations)\n    return animations;\n}\n\n\nfunction mergeSort(array, start, end, mainarray, animations){\n\n\n    if(start >= end){return}\n    \n    let mid = Math.floor((end - start)/2)\n\n    [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n    [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n    A = doMerging(left, right, A, mainarray, start, end, animations);\n    return [A, animations];\n}\n\n\n\nfunction doMerging(left, right, A, mainarray, start, end, animations){\n    let i = 0, j = 0, k = 0;\n    let length_left = left.length\n    let length_right = right.length\n    while(i < length_left && j < length_right){\n        animations.push(['c', start+i, start+j])\n        animations.push(['c', start+i, start+j])\n        if(left[i] < right[j]){\n            A.push(left[i++])\n        }\n        else if (left[i] >= right[j]){\n            A.push(right[j++])\n            animations.push(['s', start+i, start+j])\n            animations.push(['s', start+i, start+j])\n        }\n    } \n    while(i < length_left){\n        animations.push(['c', start+i, start+j])\n        animations.push(['c', start+i, start+j])\n        A.push(left[i++])\n    }\n    while(j < length_right){\n        animations.push(['c', start+i, start+j])\n        animations.push(['c', start+i, start+j])\n        A.push(right[j++])\n    }\n    return A;\n}\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}