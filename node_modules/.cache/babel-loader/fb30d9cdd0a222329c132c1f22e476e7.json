{"ast":null,"code":"var _jsxFileName = \"/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Sorting/Sorting.js\";\nimport React from \"react\";\nimport \"./Sorting.css\";\nimport mergeSort from \"../Algorithms/mergeSort\";\nimport bubbleSort from \"../Algorithms/bubbleSort\";\nimport insertionSort from \"../Algorithms/insertionSort.jsx\";\nimport quickSort from \"../Algorithms/quickSort\";\nconst COMPARISON_COLOR = \"green\";\nconst SWAP_COLOR = \"red\";\nconst ORIGINAL_COLOR = \"#008CBA\";\nconst AUTOMATION_SPEED = 200;\nconst ARRAY_SIZE = 20;\n\nclass Sorting extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      array: []\n    };\n    this.resetArray = this.resetArray.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    let i = ARRAY_SIZE;\n\n    while (i--) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    console.log(this.state.array);\n    const sortedArray = mergeSort(this.state.array);\n  }\n\n  quickSort() {\n    const sortedArray = quickSort(this.state.array);\n  }\n\n  bubbleSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const [sortedArray, animations] = bubbleSort(this.state.array, arrayBars);\n    console.log(sortedArray);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 2 === 0;\n      const barOne = animations[i][1];\n      const barTwo = animations[i][2];\n      const barOneStyle = arrayBars[barOne].style;\n      const barTwoStyle = arrayBars[barTwo].style;\n\n      if (colorChange) {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = COMPARISON_COLOR;\n            barTwoStyle.backgroundColor = COMPARISON_COLOR;\n          }, i * AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            barOneStyle.height = animations[i][3] + 'px';\n            barTwoStyle.height = animations[i][4] + 'px';\n          }, i * AUTOMATION_SPEED);\n        }\n      } else {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * AUTOMATION_SPEED);\n        }\n      }\n    }\n  }\n\n  insertionSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const [sortedArray, animations] = insertionSort(this.state.array, arrayBars);\n    console.log(sortedArray);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 2 === 0;\n      const barOne = animations[i][1];\n      const barTwo = animations[i][2];\n      const barOneStyle = arrayBars[barOne].style;\n      const barTwoStyle = arrayBars[barTwo].style;\n\n      if (colorChange) {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = COMPARISON_COLOR;\n            barTwoStyle.backgroundColor = COMPARISON_COLOR;\n          }, i * AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            barOneStyle.height = animations[i][3] + 'px';\n            barTwoStyle.height = animations[i][4] + 'px';\n          }, i * AUTOMATION_SPEED);\n        }\n      } else {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * AUTOMATION_SPEED);\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.resetArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 18\n      }\n    }, \"reset the array\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.mergeSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 18\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.quickSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 18\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.bubbleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 18\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.insertionSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 18\n      }\n    }, \"Insertion Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      id: \"whole\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, this.state.array.map((value, id) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      id: \"element\",\n      key: id,\n      style: {\n        height: value\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction testingAlgorithm(array1, array2) {\n  let i;\n\n  if (array1.length === array2.length) {\n    for (i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    if (i === array1.length) {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nexport default Sorting;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Sorting/Sorting.js"],"names":["React","mergeSort","bubbleSort","insertionSort","quickSort","COMPARISON_COLOR","SWAP_COLOR","ORIGINAL_COLOR","AUTOMATION_SPEED","ARRAY_SIZE","Sorting","Component","constructor","state","array","resetArray","bind","componentDidMount","i","push","randomIntFromInterval","setState","console","log","sortedArray","arrayBars","document","getElementsByClassName","testSortedArray","slice","sort","a","b","animations","testingAlgorithm","length","colorChange","barOne","barTwo","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","height","render","map","value","id","min","max","Math","floor","random","array1","array2"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./Sorting.css\";\nimport mergeSort from \"../Algorithms/mergeSort\";\nimport bubbleSort from \"../Algorithms/bubbleSort\";\nimport insertionSort from \"../Algorithms/insertionSort.jsx\";\nimport quickSort from \"../Algorithms/quickSort\";\n\nconst COMPARISON_COLOR = \"green\"\nconst SWAP_COLOR = \"red\"\nconst ORIGINAL_COLOR = \"#008CBA\"\nconst AUTOMATION_SPEED = 200\nconst ARRAY_SIZE = 20\n\nclass Sorting extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            array: []\n        }; \n        this.resetArray = this.resetArray.bind(this)\n        this.mergeSort = this.mergeSort.bind(this)\n        this.quickSort = this.quickSort.bind(this)\n        this.insertionSort = this.insertionSort.bind(this)\n        this.bubbleSort = this.bubbleSort.bind(this)\n    }\n    \n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        let i = ARRAY_SIZE;\n        while(i--){\n            array.push(randomIntFromInterval(5, 500))\n        }\n        this.setState({array})\n    }\n    mergeSort(){\n        console.log(this.state.array)\n        const sortedArray = mergeSort(this.state.array)\n    }\n    quickSort(){\n        const sortedArray = quickSort(this.state.array)\n    }\n    bubbleSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = bubbleSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n            }\n        }\n        \n    }\n\n    insertionSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = insertionSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style\n            const barTwoStyle = arrayBars[barTwo].style\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n            }\n        }\n    }\n\n\n    render(){\n\n        return(\n            <div>\n                <div className=\"button-container\">\n                 <button id=\"button\" onClick={this.resetArray}>reset the array</button>\n                 <button id=\"button\" onClick={this.mergeSort}>Merge Sort</button>\n                 <button id=\"button\" onClick={this.quickSort}>Quick Sort</button>\n                 <button id=\"button\" onClick={this.bubbleSort}>Bubble Sort</button>   \n                 <button id=\"button\" onClick={this.insertionSort}>Insertion Sort</button>\n                </div>\n                \n\n\n                <div className=\"array-container\" id=\"whole\">\n                    {this.state.array.map((value, id) => (\n                        <div\n                            className=\"array-bar\" \n                            id=\"element\"\n                            key={id} \n                            style={{height: value}}\n                        >\n                        </div>\n                    ))}\n                </div>\n                \n               \n            </div>\n        )\n    }\n}\n\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() *  (max - min + 1) + min);\n}\n\n\nfunction testingAlgorithm(array1, array2){\n    let i;\n    if(array1.length === array2.length){\n        for(i = 0; i < array1.length; i++){\n            if(array1[i] !== array2[i]){\n                return false\n            }\n        }\n        if(i === array1.length){\n            return true;\n        }\n    }\n    else{\n        return false\n    }\n}\n\nexport default Sorting;"]},"metadata":{},"sourceType":"module"}