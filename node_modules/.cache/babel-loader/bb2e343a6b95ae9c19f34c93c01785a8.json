{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let i, left= [], right = [];\n//     let mid = Math.floor((end - start)/2)\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array) {\n  const animations = [];\n\n  if (array.length <= 1) {\n    return;\n  }\n\n  let mainarray = [];\n  mainarray = array;\n  console.log(\"mainarrray\", mainarray); //mergeSort(array, 0, array.length - 1, mainarray, animations)\n\n  return animations;\n} // function mergeSort(array, start, end, mainarray, animations){\n//     if(start === end){return}\n//     let mid = Math.floor((end - start)/2)\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\n\nexport default getmergesortanimations;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","getmergesortanimations","array","animations","length","mainarray","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,sBAAT,CAAgCC,KAAhC,EAAsC;AAElC,QAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB;AAAC;AAAO;;AAC/B,MAAIC,SAAS,GAAG,EAAhB;AACAA,EAAAA,SAAS,GAAGH,KAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,SAA1B,EAPkC,CAQlC;;AAEA,SAAOF,UAAP;AACH,C,CAGD;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA,eAAeF,sBAAf","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let mainarray = [];\n    mainarray = array\n    console.log(\"mainarrray\", mainarray)\n    //mergeSort(array, 0, array.length - 1, mainarray, animations)\n\n    return animations;\n}\n\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){return}\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\n\n\n\nexport default getmergesortanimations;\n"]},"metadata":{},"sourceType":"module"}