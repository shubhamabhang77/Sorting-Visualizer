{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let animations = [];\n//     let i, left, right;\n//     let mid = Math.floor((end - start)/2)\n//     left = mergeSort(array, start, start+mid, mainarray);\n//     right = mergeSort(array, start+mid+1, end, mainarray);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return A;\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//         }\n//     } \n//     while(i < length_left){\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction mergeSort(array, start, end, mainarray) {\n  if (start < end) {\n    let mid = start + (end - start) / 2;\n    left = mergeSort(array, start, start + mid, mainarray);\n    right = mergeSort(array, start + mid + 1, end, mainarray);\n  }\n\n  let A = [];\n  let animations = [];\n  let i, left, right;\n  let mid = Math.floor((end - start) / 2);\n  left = mergeSort(array, start, start + mid, mainarray);\n  right = mergeSort(array, start + mid + 1, end, mainarray);\n  A = doMerging(left, right, A, mainarray, start, end, animations);\n  return A;\n}\n\nfunction doMerging(left, right, A, mainarray, start, end, animations) {\n  let i = 0,\n      j = 0,\n      k = 0;\n  let length_left = left.length;\n  let length_right = right.length;\n\n  while (i < length_left && j < length_right) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (left[i] < right[j]) {\n      A.push(left[i++]);\n    } else if (left[i] >= right[j]) {\n      A.push(right[j++]);\n    }\n  }\n\n  while (i < length_left) {\n    A.push(left[i++]);\n  }\n\n  while (j < length_right) {\n    A.push(right[j++]);\n  }\n\n  return A;\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","mergeSort","array","start","end","mainarray","mid","left","right","A","animations","i","Math","floor","doMerging","j","k","length_left","length","length_right","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let animations = [];\n//     let i, left, right;\n//     let mid = Math.floor((end - start)/2)\n\n\n//     left = mergeSort(array, start, start+mid, mainarray);\n//     right = mergeSort(array, start+mid+1, end, mainarray);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return A;\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//         }\n//     } \n//     while(i < length_left){\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\n\n\n\nfunction mergeSort(array, start, end, mainarray){\n\n\n    if(start < end){\n      \n        let mid = start + (end-start)/2\n        left = mergeSort(array, start, start+mid, mainarray);\n        right = mergeSort(array, start+mid+1, end, mainarray);\n    \n    }\n\n    let A = [];\n    let animations = [];\n    let i, left, right;\n    let mid = Math.floor((end - start)/2)\n\n\n    left = mergeSort(array, start, start+mid, mainarray);\n    right = mergeSort(array, start+mid+1, end, mainarray);\n\n    A = doMerging(left, right, A, mainarray, start, end, animations);\n    return A;\n}\n\n\n\nfunction doMerging(left, right, A, mainarray, start, end, animations){\n    let i = 0, j = 0, k = 0;\n    let length_left = left.length\n    let length_right = right.length\n    while(i < length_left && j < length_right){\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(left[i] < right[j]){\n            A.push(left[i++])\n        }\n        else if (left[i] >= right[j]){\n            A.push(right[j++])\n        }\n    } \n    while(i < length_left){\n        A.push(left[i++])\n    }\n    while(j < length_right){\n        A.push(right[j++])\n    }\n    return A;\n}\n\n\n\n\n\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}