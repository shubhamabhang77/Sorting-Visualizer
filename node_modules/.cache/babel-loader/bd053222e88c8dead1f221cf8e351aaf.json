{"ast":null,"code":"import React from \"react\"; // function mergeSort(array, start, end, mainarray){\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n//     let A = [];\n//     let animations = [];\n//     let i, left, right;\n//     let mid = Math.floor((end - start)/2)\n//     left = mergeSort(array, start, start+mid, mainarray);\n//     right = mergeSort(array, start+mid+1, end, mainarray);\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return A;\n// }\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//         }\n//     } \n//     while(i < length_left){\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction mergeSort(array, start, end, mainarray, animations) {\n  if (start < end) {\n    let mid = start + Math.floor((end - start) / 2);\n    mergeSort(array, start, start + mid, mainarray);\n    mergeSort(array, start + mid + 1, end, mainarray);\n    doMerging(array, start, mid, end, mainarray, animations);\n  }\n\n  left = mergeSort(array, start, start + mid, mainarray);\n  right = mergeSort(array, start + mid + 1, end, mainarray);\n  A = doMerging(left, right, A, mainarray, start, end, animations);\n  return A;\n}\n\nfunction doMerging(left, right, A, mainarray, start, end, animations) {\n  let i = 0,\n      j = 0,\n      k = 0;\n  let length_left = left.length;\n  let length_right = right.length;\n\n  while (i < length_left && j < length_right) {\n    animations.push(['c', i, j]);\n    animations.push(['c', i, j]);\n\n    if (left[i] < right[j]) {\n      A.push(left[i++]);\n    } else if (left[i] >= right[j]) {\n      A.push(right[j++]);\n    }\n  }\n\n  while (i < length_left) {\n    A.push(left[i++]);\n  }\n\n  while (j < length_right) {\n    A.push(right[j++]);\n  }\n\n  return A;\n}\n\nexport default mergeSort;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Algorithms/mergeSort.js"],"names":["React","mergeSort","array","start","end","mainarray","animations","mid","Math","floor","doMerging","left","right","A","i","j","k","length_left","length","length_right","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let animations = [];\n//     let i, left, right;\n//     let mid = Math.floor((end - start)/2)\n\n\n//     left = mergeSort(array, start, start+mid, mainarray);\n//     right = mergeSort(array, start+mid+1, end, mainarray);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return A;\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', i, j])\n//         animations.push(['c', i, j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//         }\n//     } \n//     while(i < length_left){\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\n\n\n\nfunction mergeSort(array, start, end, mainarray, animations){\n\n\n    if(start < end){\n      \n        let mid = start + Math.floor((end-start)/2)\n        mergeSort(array, start, start+mid, mainarray);\n        mergeSort(array, start+mid+1, end, mainarray);\n\n        doMerging(array, start, mid, end, mainarray, animations);\n    \n    \n    }\n\n\n\n    left = mergeSort(array, start, start+mid, mainarray);\n    right = mergeSort(array, start+mid+1, end, mainarray);\n\n    A = doMerging(left, right, A, mainarray, start, end, animations);\n    return A;\n}\n\n\n\nfunction doMerging(left, right, A, mainarray, start, end, animations){\n    let i = 0, j = 0, k = 0;\n    let length_left = left.length\n    let length_right = right.length\n    while(i < length_left && j < length_right){\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(left[i] < right[j]){\n            A.push(left[i++])\n        }\n        else if (left[i] >= right[j]){\n            A.push(right[j++])\n        }\n    } \n    while(i < length_left){\n        A.push(left[i++])\n    }\n    while(j < length_right){\n        A.push(right[j++])\n    }\n    return A;\n}\n\n\n\n\n\n\nexport default mergeSort;"]},"metadata":{},"sourceType":"module"}