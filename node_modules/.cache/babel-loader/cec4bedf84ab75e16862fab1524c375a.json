{"ast":null,"code":"var _jsxFileName = \"/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Sorting/Sorting.js\";\nimport React from \"react\";\nimport \"./Sorting.css\";\nimport getmergesortanimations from \"../Algorithms/mergeSort\";\nimport bubbleSort from \"../Algorithms/bubbleSort\";\nimport insertionSort from \"../Algorithms/insertionSort\";\nimport getQuickSortAnimations from \"../Algorithms/quickSort\";\nimport selectionSort from \"../Algorithms/selectionSort\";\nimport Panel from \"./Panel\";\nimport Footer from \"./Footer.js\";\nconst COMPARISON_COLOR = \"green\";\nconst SWAP_COLOR = \"red\";\nconst ORIGINAL_COLOR = \"#008CBA\";\n\nclass Sorting extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      array: [],\n      AUTOMATION_SPEED: 3,\n      ARRAY_SIZE: 200\n    };\n    this.resetArray = this.resetArray.bind(this);\n    this.mergeSort = this.mergeSort.bind(this);\n    this.quickSort = this.quickSort.bind(this);\n    this.insertionSort = this.insertionSort.bind(this);\n    this.bubbleSort = this.bubbleSort.bind(this);\n    this.selectionSort = this.selectionSort.bind(this);\n    this.getText = this.getText.bind(this);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    let i = this.state.ARRAY_SIZE;\n\n    while (i--) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const [sortedArray, animations] = getmergesortanimations(this.state.array);\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 3 !== 2;\n\n      if (colorChange) {\n        const barOne = animations[i][1];\n        const barTwo = animations[i][2];\n        const barOneStyle = arrayBars[barOne].style;\n        const barTwoStyle = arrayBars[barTwo].style;\n        const color = i % 3 === 0 ? SWAP_COLOR : ORIGINAL_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.AUTOMATION_SPEED);\n      } else {\n        const barOne = animations[i][1];\n        const barOneStyle = arrayBars[barOne].style;\n        setTimeout(() => {\n          barOneStyle.height = animations[i][2] + 'px';\n        }, i * this.state.AUTOMATION_SPEED);\n      }\n\n      if (i === length - 1) {\n        setTimeout(() => {\n          this.setState({\n            array: sortedArray\n          });\n        }, (i + 1) * this.state.AUTOMATION_SPEED);\n      }\n    }\n  }\n\n  quickSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const [sortedArray, animations] = getQuickSortAnimations(this.state.array);\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 2 === 0;\n      const barOne = animations[i][1];\n      const barTwo = animations[i][2];\n      const barOneStyle = arrayBars[barOne].style;\n      const barTwoStyle = arrayBars[barTwo].style;\n\n      if (colorChange) {\n        if (animations[i][0] === 'c') {\n          const barThree = animations[i][3];\n          const barThreeStyle = arrayBars[barThree].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = COMPARISON_COLOR;\n            barTwoStyle.backgroundColor = 'yellow';\n            barThreeStyle.backgroundColor = COMPARISON_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            barOneStyle.height = animations[i][3] + 'px';\n            barTwoStyle.height = animations[i][4] + 'px';\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      } else {\n        if (animations[i][0] === 'c') {\n          const barThree = animations[i][3];\n          const barThreeStyle = arrayBars[barThree].style;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n            barThreeStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      }\n\n      if (i === length - 1) {\n        setTimeout(() => {\n          this.setState({\n            array: sortedArray\n          });\n        }, (i + 1) * this.state.AUTOMATION_SPEED);\n      }\n    }\n  }\n\n  selectionSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const [sortedArray, animations] = selectionSort(this.state.array, arrayBars);\n    console.log(sortedArray);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 2 === 0;\n      const barOne = animations[i][1];\n      const barTwo = animations[i][2];\n      const barOneStyle = arrayBars[barOne].style;\n      const barTwoStyle = arrayBars[barTwo].style;\n\n      if (colorChange) {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = COMPARISON_COLOR;\n            barTwoStyle.backgroundColor = COMPARISON_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            barOneStyle.height = animations[i][3] + 'px';\n            barTwoStyle.height = animations[i][4] + 'px';\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      } else {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      }\n\n      if (i === length - 1) {\n        setTimeout(() => {\n          this.setState({\n            array: sortedArray\n          });\n        }, (i + 1) * this.state.AUTOMATION_SPEED);\n      }\n    }\n  }\n\n  bubbleSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const [sortedArray, animations] = bubbleSort(this.state.array, arrayBars);\n    console.log(sortedArray);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 2 === 0;\n      const barOne = animations[i][1];\n      const barTwo = animations[i][2];\n      const barOneStyle = arrayBars[barOne].style;\n      const barTwoStyle = arrayBars[barTwo].style;\n\n      if (colorChange) {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = COMPARISON_COLOR;\n            barTwoStyle.backgroundColor = COMPARISON_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            barOneStyle.height = animations[i][3] + 'px';\n            barTwoStyle.height = animations[i][4] + 'px';\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      } else {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      }\n\n      if (i === length - 1) {\n        setTimeout(() => {\n          this.setState({\n            array: sortedArray\n          });\n        }, (i + 1) * this.state.AUTOMATION_SPEED);\n      }\n    }\n  }\n\n  insertionSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    const testSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const [sortedArray, animations] = insertionSort(this.state.array, arrayBars);\n    console.log(sortedArray);\n    testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n    const length = animations.length;\n\n    for (let i = 0; i < length; i++) {\n      const colorChange = i % 2 === 0;\n      const barOne = animations[i][1];\n      const barTwo = animations[i][2];\n      const barOneStyle = arrayBars[barOne].style;\n      const barTwoStyle = arrayBars[barTwo].style;\n\n      if (colorChange) {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = COMPARISON_COLOR;\n            barTwoStyle.backgroundColor = COMPARISON_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = SWAP_COLOR;\n            barTwoStyle.backgroundColor = SWAP_COLOR;\n            barOneStyle.height = animations[i][3] + 'px';\n            barTwoStyle.height = animations[i][4] + 'px';\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      } else {\n        if (animations[i][0] === 'c') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        } else if (animations[i][0] === 's') {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = ORIGINAL_COLOR;\n            barTwoStyle.backgroundColor = ORIGINAL_COLOR;\n          }, i * this.state.AUTOMATION_SPEED);\n        }\n      }\n\n      if (i === length - 1) {\n        setTimeout(() => {\n          this.setState({\n            array: sortedArray\n          });\n        }, (i + 1) * this.state.AUTOMATION_SPEED);\n      }\n    }\n  }\n\n  getText(event) {\n    var x = document.getElementById(\"array-size\").value;\n\n    if (isNaN(x)) {\n      alert('Please, Enter a number');\n    } else if (x <= 1000 & x >= 10) {\n      document.getElementById(\"textprint\").innerHTML = x;\n      this.setState({\n        ARRAY_SIZE: Number(x)\n      });\n      console.log(typeof x === 'number');\n      console.log(this.state.ARRAY_SIZE);\n    } else {\n      alert(\"Please, Enter a number between 10 and 1000\");\n    }\n  }\n\n  render() {\n    let x = document.getElementById(\"text\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      float: \"left\",\n      onClick: this.resetArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 18\n      }\n    }, \"Reset the Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.mergeSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 18\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.quickSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 18\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.bubbleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 18\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.insertionSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 18\n      }\n    }, \"Insertion Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"button\",\n      onClick: this.selectionSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 18\n      }\n    }, \"Selection Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"second\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Panel\",\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 25\n      }\n    }, \"Array Size: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"array-size\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 25\n      }\n    }, \"enter\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"textprint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 25\n      }\n    }, this.state.ARRAY_SIZE)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      id: \"whole\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 21\n      }\n    }, this.state.array.map((value, id) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      id: \"element\",\n      key: id,\n      style: {\n        height: value\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 25\n      }\n    })))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 16\n      }\n    }));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction testingAlgorithm(array1, array2) {\n  let i;\n\n  if (array1.length === array2.length) {\n    for (i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    if (i === array1.length) {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n\nexport default Sorting;","map":{"version":3,"sources":["/home/shubham/HTML workspace/projects/Sorting-Visualizer/src/Sorting/Sorting.js"],"names":["React","getmergesortanimations","bubbleSort","insertionSort","getQuickSortAnimations","selectionSort","Panel","Footer","COMPARISON_COLOR","SWAP_COLOR","ORIGINAL_COLOR","Sorting","Component","constructor","state","array","AUTOMATION_SPEED","ARRAY_SIZE","resetArray","bind","mergeSort","quickSort","getText","componentDidMount","i","push","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","sortedArray","animations","testSortedArray","slice","sort","a","b","testingAlgorithm","console","log","length","colorChange","barOne","barTwo","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","barThree","barThreeStyle","event","x","getElementById","value","isNaN","alert","innerHTML","Number","render","float","map","id","min","max","Math","floor","random","array1","array2"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./Sorting.css\";\nimport getmergesortanimations from \"../Algorithms/mergeSort\";\nimport bubbleSort from \"../Algorithms/bubbleSort\";\nimport insertionSort from \"../Algorithms/insertionSort\";\nimport getQuickSortAnimations from \"../Algorithms/quickSort\";\nimport selectionSort from \"../Algorithms/selectionSort\";\nimport Panel from \"./Panel\";\nimport Footer from \"./Footer.js\"\n\n\n\nconst COMPARISON_COLOR = \"green\"\nconst SWAP_COLOR = \"red\"\nconst ORIGINAL_COLOR = \"#008CBA\"\n\nclass Sorting extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            array: [],\n            AUTOMATION_SPEED: 3,\n            ARRAY_SIZE: 200\n        }; \n        this.resetArray = this.resetArray.bind(this)\n        this.mergeSort = this.mergeSort.bind(this)\n        this.quickSort = this.quickSort.bind(this)\n        this.insertionSort = this.insertionSort.bind(this)\n        this.bubbleSort = this.bubbleSort.bind(this)\n        this.selectionSort = this.selectionSort.bind(this)\n        this.getText = this.getText.bind(this)\n    }\n    \n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        let i = this.state.ARRAY_SIZE;\n        while(i--){\n            array.push(randomIntFromInterval(5, 500))\n        }\n        this.setState({array})\n    }\n    mergeSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n \n        const [sortedArray, animations] = getmergesortanimations(this.state.array)\n        const testSortedArray = this.state.array.slice().sort((a, b) => a-b)\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n\n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 3 !== 2)\n            if(colorChange){\n                const barOne = animations[i][1];\n                const barTwo = animations[i][2];\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n                const color = (i % 3 === 0) ? SWAP_COLOR : ORIGINAL_COLOR\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*this.state.AUTOMATION_SPEED)\n            }\n            else{\n                const barOne = animations[i][1];\n                const barOneStyle = arrayBars[barOne].style;\n\n                setTimeout(() => {\n                    barOneStyle.height = animations[i][2] + 'px'\n                }, i*this.state.AUTOMATION_SPEED)\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * this.state.AUTOMATION_SPEED)\n            }\n        }\n\n    }\n    quickSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const [sortedArray, animations] = getQuickSortAnimations(this.state.array)\n\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n\n\n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    const barThree = animations[i][3];\n                    const barThreeStyle = arrayBars[barThree].style;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR  \n                        barTwoStyle.backgroundColor = 'yellow'\n                        barThreeStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * this.state.AUTOMATION_SPEED)\n\n                }\n\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    const barThree = animations[i][3];\n                    const barThreeStyle = arrayBars[barThree].style;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                        barThreeStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * this.state.AUTOMATION_SPEED)\n            }\n        }\n    }\n    selectionSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = selectionSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * this.state.AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * this.state.AUTOMATION_SPEED)\n            }\n        }\n\n    }\n\n    bubbleSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = bubbleSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * this.state.AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * this.state.AUTOMATION_SPEED)\n            }\n        }\n        \n    }\n\n    insertionSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = insertionSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style\n            const barTwoStyle = arrayBars[barTwo].style\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * this.state.AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * this.state.AUTOMATION_SPEED)\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * this.state.AUTOMATION_SPEED)\n            }\n        }\n    }\n\n    getText(event){\n        var x = document.getElementById(\"array-size\").value\n        if(isNaN(x)){\n            alert('Please, Enter a number')\n        }\n        else if (x <= 1000 & x >= 10){\n            document.getElementById(\"textprint\").innerHTML = x \n            this.setState({ARRAY_SIZE: Number(x)})\n            console.log(typeof(x) === 'number')\n            console.log(this.state.ARRAY_SIZE)\n        }\n        else{\n            alert(\"Please, Enter a number between 10 and 1000\")\n        }\n\n    }\n    \n\n    render(){\n        let x = document.getElementById(\"text\")\n        return(\n            <div>\n                <div className=\"button-container\">\n                 <button id=\"button\" float={\"left\"} onClick={this.resetArray}>Reset the Array</button>\n                 <button id=\"button\" onClick={this.mergeSort}>Merge Sort</button>\n                 <button id=\"button\" onClick={this.quickSort}>Quick Sort</button>\n                 <button id=\"button\" onClick={this.bubbleSort}>Bubble Sort</button>   \n                 <button id=\"button\" onClick={this.insertionSort}>Insertion Sort</button>\n                 <button id=\"button\" onClick={this.selectionSort}>Selection Sort</button>\n                </div>\n                <div className=\"second\">\n                    <div className=\"Panel\" style={{float: \"left\"}}>\n                        <label>Array Size: </label><input type=\"text\" id=\"array-size\"></input>\n                        <button onClick={this.getText}>enter</button>\n                        <p id=\"textprint\">{this.state.ARRAY_SIZE}</p>\n                    </div>\n                    <div className=\"array-container\" id=\"whole\" style={{float:\"right\"}}>\n                    {this.state.array.map((value, id) => (\n                        <div\n                            className=\"array-bar\" \n                            id=\"element\"\n                            key={id} \n                            style={{height: value}}\n                        >\n                        </div>\n                    ))}\n                    </div>\n                </div>\n                \n\n                \n                \n               <Footer></Footer>\n            </div>\n        )\n    }\n}\n\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() *  (max - min + 1) + min);\n}\n\nfunction testingAlgorithm(array1, array2){\n    let i;\n    if(array1.length === array2.length){\n        for(i = 0; i < array1.length; i++){\n            if(array1[i] !== array2[i]){\n                return false\n            }\n        }\n        if(i === array1.length){\n            return true;\n        }\n    }\n    else{\n        return false\n    }\n}\n\nexport default Sorting;\n"]},"metadata":{},"sourceType":"module"}