{"version":3,"sources":["Algorithms/mergeSort.js","Algorithms/bubbleSort.js","Algorithms/insertionSort.js","Algorithms/quickSort.js","Algorithms/selectionSort.js","Sorting/Sorting.js","App.js","serviceWorker.js","index.js"],"names":["getmergesortanimations","array","secondarray","animations","length","slice","mergeSort","mainarray","start","end","mid","Math","floor","i","j","k","push","doMerging","bubbleSort","temp","flag","insertionSort","arrayBars","getQuickSortAnimations","console","log","quickSort","pIndex","pivot","partition","selectionSort","min_index","min_element","testingAlgorithm","array1","array2","Sorting","state","resetArray","bind","this","min","max","random","setState","document","getElementsByClassName","sortedArray","sort","a","b","barOne","barTwo","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","colorChange","barThree","barThreeStyle","testSortedArray","className","id","onClick","map","value","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.735c8cd9.chunk.js","sourcesContent":["import React from \"react\";\n\n// function mergeSort(array, start, end, mainarray, animations){\n\n\n//     if(start === end){\n//         let temp = []\n//         temp.push(array[start])\n//         return temp;\n//     }\n\n//     let A = [];\n//     let i, left= [], right = [];\n    \n//     let mid = Math.floor((end - start)/2)\n\n//     console.log(\"shbuham\")\n//     [left, animations] = mergeSort(array, start, start+mid, mainarray, animations);\n//     [right, animations] = mergeSort(array, start+mid+1, end, mainarray, animations);\n\n//     A = doMerging(left, right, A, mainarray, start, end, animations);\n//     return [A, animations];\n// }\n\n\n\n// function doMerging(left, right, A, mainarray, start, end, animations){\n//     let i = 0, j = 0, k = 0;\n//     let length_left = left.length\n//     let length_right = right.length\n//     while(i < length_left && j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         if(left[i] < right[j]){\n//             A.push(left[i++])\n//         }\n//         else if (left[i] >= right[j]){\n//             A.push(right[j++])\n//             animations.push(['s', start+i, start+j])\n//             animations.push(['s', start+i, start+j])\n//         }\n//     } \n//     while(i < length_left){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(left[i++])\n//     }\n//     while(j < length_right){\n//         animations.push(['c', start+i, start+j])\n//         animations.push(['c', start+i, start+j])\n//         A.push(right[j++])\n//     }\n//     return A;\n// }\n\nfunction getmergesortanimations(array){\n    \n    const animations = [];    \n\n    if (array.length <= 1) {return}\n    let secondarray = [];\n    secondarray = array.slice()\n\n    mergeSort(array, 0, array.length - 1, secondarray, animations)\n    return [secondarray, animations];\n}\n\n\nfunction mergeSort(mainarray, start, end, array, animations){\n\n    if(start >= end){return}\n    \n    let mid = Math.floor(start + (end - start)/2)\n    mergeSort(array, start, mid, mainarray, animations);\n    mergeSort(array, mid+1, end, mainarray, animations);\n\n    doMerging(mainarray, start, mid, end, array, animations);\n\n}\n\n\nfunction doMerging(array, start, mid, end, mainarray, animations){\n    let i = start\n    let j = mid+1\n    let k = start;\n\n    while(i <= mid && j <= end){\n\n        animations.push(['c', i, j])\n        animations.push(['c', i, j])\n        if(array[i] <= array[j]){\n            animations.push(['s', k, array[i]])\n            mainarray[k++] = array[i++]\n        }\n        else{\n            animations.push(['s', k, array[j]])\n            mainarray[k++] = array[j++]\n        }\n    } \n    while(i <= mid){\n        animations.push(['c', i, i])\n        animations.push(['c', i, i])\n        animations.push(['s', k, array[i]])\n        mainarray[k++] = array[i++]\n    }\n    while(j <= end){\n        animations.push(['c', j, j])\n        animations.push(['c', j, j])\n        animations.push(['s', k, array[j]])\n        mainarray[k++] = array[j++]\n    }\n\n\n}\n\n\n\n\n\n\nexport default getmergesortanimations;\n","import React from \"react\";\n\nfunction bubbleSort(array){\n    let temp, i, j;\n    let length = array.length\n    const animations = [];\n    let flag = 0\n    for(i = 0; i < length-1; i++){\n        for(j = 0; j < length-(i+1); j++){\n            \n            animations.push(['c', j+1, j])\n            animations.push(['c', j+1, j])\n\n            if(array[j+1] < array[j]){\n\n                animations.push(['s', j+1, j, array[j], array[j+1]])\n                animations.push(['s', j+1, j])\n                \n                temp = array[j+1]\n                array[j+1] = array[j]\n                array[j] = temp;\n                flag = 1            \n            }\n        }\n        if (flag === 0){\n            break\n        }\n    }\n    return [array, animations];\n}\n\n\n\n\n\n\n\n\n\n\n\nexport default bubbleSort;","\nfunction insertionSort(array, arrayBars){\n    let temp, i, j;\n    let length = array.length\n    const animations = [];\n\n    \n    for(i = 1; i < length; i++){\n        for(j = i-1; j >= 0; j--){\n            \n            animations.push(['c', j+1, j])\n            animations.push(['c', j+1, j])\n\n            if(array[j+1] < array[j]){\n                animations.push(['s', j+1, j, array[j], array[j+1]])\n                animations.push(['s', j+1, j])\n            \n                temp = array[j+1]\n                array[j+1] = array[j]\n                array[j] = temp;            \n            }\n            else{\n                break\n            }\n        }\n    }\n    return [array, animations];\n}\n\n\n\nexport default insertionSort;","import React from \"react\";\n\n\nexport default function getQuickSortAnimations(array){\n    const animations = [];\n    const length = array.length\n    console.log(array)\n    quickSort(array, 0, length-1, animations);\n    console.log(array)\n\n    return [array, animations];\n}\n\n\n\nfunction quickSort(array, start, end, animations){\n    let pIndex\n    if(start < end){\n        pIndex = partition(array, start, end, animations)\n        quickSort(array, start, pIndex-1, animations)\n        quickSort(array, pIndex+1, end, animations)\n        \n    }\n}\n\nfunction partition(array, start, end, animations){\n    let i = 0\n    let pivot = array[end]\n    let temp\n    console.log(\"pivot value \", pivot)\n    let pIndex = start\n    for(i = start; i < end; i++){\n        animations.push(['c', i, pIndex, end])\n        animations.push(['c', i, pIndex, end])\n\n        if(array[i] < pivot){\n\n            animations.push(['s', pIndex, i, array[i], array[pIndex]])\n            animations.push(['s', pIndex, i])\n\n            temp = array[i]\n            array[i] = array[pIndex]\n            array[pIndex] = temp\n            pIndex++;\n            console.log(\"shubham\", array[i], array[pIndex-1])\n        }\n    }\n\n    animations.push(['sp', end, pIndex, array[pIndex], array[end]])\n    animations.push(['sp', end, pIndex])\n\n    temp = array[end]\n    array[end] = array[pIndex]\n    array[pIndex] = temp\n    console.log(\"shubham\", array[i], array[pIndex-1])\n    console.log(\"after swapping\", array)\n    return pIndex\n}\n\n\n\n\n","\nfunction selectionSort(array){\n    let i, temp, min_index, min_element, j;\n    const animations = [];\n\n    const length = array.length\n    for(i = 0; i < length; i++){\n        min_element = array[i]\n        min_index = i\n        for(j = i+1; j < length; j++){\n\n            animations.push(['c', min_index, j])\n            animations.push(['c', min_index, j])\n\n            if(min_element > array[j]){\n                min_element = array[j]\n                min_index = j\n            }\n        }\n\n        \n        temp = array[min_index]\n        array[min_index] = array[i]\n        array[i] = temp\n        \n        animations.push(['s', i, min_index, array[i], array[min_index]])\n        animations.push(['s', i, min_index])\n\n\n    }\n    return [array, animations];\n}\n\n\nexport default selectionSort;","import React from \"react\";\nimport \"./Sorting.css\";\nimport getmergesortanimations from \"../Algorithms/mergeSort\";\nimport bubbleSort from \"../Algorithms/bubbleSort\";\nimport insertionSort from \"../Algorithms/insertionSort\";\nimport getQuickSortAnimations from \"../Algorithms/quickSort\";\nimport selectionSort from \"../Algorithms/selectionSort\"\n\n\nconst COMPARISON_COLOR = \"green\"\nconst SWAP_COLOR = \"red\"\nconst ORIGINAL_COLOR = \"#008CBA\"\nconst AUTOMATION_SPEED = 300\nconst ARRAY_SIZE = 16\n\nclass Sorting extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            array: []\n        }; \n        this.resetArray = this.resetArray.bind(this)\n        this.mergeSort = this.mergeSort.bind(this)\n        this.quickSort = this.quickSort.bind(this)\n        this.insertionSort = this.insertionSort.bind(this)\n        this.bubbleSort = this.bubbleSort.bind(this)\n        this.selectionSort = this.selectionSort.bind(this)\n    }\n    \n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        let i = ARRAY_SIZE;\n        while(i--){\n            array.push(randomIntFromInterval(5, 500))\n        }\n        this.setState({array})\n    }\n    mergeSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n \n        const [sortedArray, animations] = getmergesortanimations(this.state.array)\n        const testSortedArray = this.state.array.slice().sort((a, b) => a-b)\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n\n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 3 !== 2)\n            if(colorChange){\n                const barOne = animations[i][1];\n                const barTwo = animations[i][2];\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n                const color = (i % 3 === 0) ? SWAP_COLOR : ORIGINAL_COLOR\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*AUTOMATION_SPEED)\n            }\n            else{\n                const barOne = animations[i][1];\n                const barOneStyle = arrayBars[barOne].style;\n\n                setTimeout(() => {\n                    barOneStyle.height = animations[i][2] + 'px'\n                }, i*AUTOMATION_SPEED)\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * AUTOMATION_SPEED)\n            }\n        }\n\n    }\n    quickSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const [sortedArray, animations] = getQuickSortAnimations(this.state.array)\n\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n\n\n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    const barThree = animations[i][3];\n                    const barThreeStyle = arrayBars[barThree].style;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR  \n                        barTwoStyle.backgroundColor = 'yellow'\n                        barThreeStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * AUTOMATION_SPEED)\n\n                }\n                else if(animations[i][0] === 'sp'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][4] + 'px'\n                        barTwoStyle.height = animations[i][5] + 'px'\n                    })\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    const barThree = animations[i][3];\n                    const barThreeStyle = arrayBars[barThree].style;\n\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                        barThreeStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 'sp'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    })\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * AUTOMATION_SPEED)\n            }\n        }\n    }\n    selectionSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = selectionSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * AUTOMATION_SPEED)\n            }\n        }\n\n    }\n\n    bubbleSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = bubbleSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style;\n            const barTwoStyle = arrayBars[barTwo].style;\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * AUTOMATION_SPEED)\n            }\n        }\n        \n    }\n\n    insertionSort(){\n        let arrayBars = document.getElementsByClassName(\"array-bar\")\n        const testSortedArray = this.state.array.slice().sort((a,b) => a-b);\n        const [sortedArray, animations] = insertionSort(this.state.array, arrayBars);\n\n        console.log(sortedArray)\n\n        testingAlgorithm(testSortedArray, sortedArray) ? console.log(\"array is sorted properly\") : console.log(\"array is not sorted properly\");\n        \n        const length = animations.length\n        for(let i = 0; i < length; i++){\n            const colorChange = (i % 2 === 0)\n            const barOne = animations[i][1];\n            const barTwo = animations[i][2];\n            const barOneStyle = arrayBars[barOne].style\n            const barTwoStyle = arrayBars[barTwo].style\n            \n            if(colorChange){\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = COMPARISON_COLOR\n                        barTwoStyle.backgroundColor = COMPARISON_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = SWAP_COLOR\n                        barTwoStyle.backgroundColor = SWAP_COLOR\n                        barOneStyle.height = animations[i][3] + 'px'\n                        barTwoStyle.height = animations[i][4] + 'px'\n                    }, i * AUTOMATION_SPEED)\n\n                }\n            }\n            else {\n                if(animations[i][0] === 'c'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n                else if(animations[i][0] === 's'){\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = ORIGINAL_COLOR\n                        barTwoStyle.backgroundColor = ORIGINAL_COLOR\n                    }, i * AUTOMATION_SPEED)\n                }\n            }\n            if(i === (length-1)){\n                setTimeout(() => {\n                    this.setState({array: sortedArray})\n                }, (i+1) * AUTOMATION_SPEED)\n            }\n        }\n    }\n\n\n    render(){\n\n        return(\n            <div>\n                <div className=\"button-container\">\n                 <button id=\"button\" onClick={this.resetArray}>reset the array</button>\n                 <button id=\"button\" onClick={this.mergeSort}>Merge Sort</button>\n                 <button id=\"button\" onClick={this.quickSort}>Quick Sort</button>\n                 <button id=\"button\" onClick={this.bubbleSort}>Bubble Sort</button>   \n                 <button id=\"button\" onClick={this.insertionSort}>Insertion Sort</button>\n                 <button id=\"button\" onClick={this.selectionSort}>Selection Sort</button>\n                </div>\n                \n\n\n                <div className=\"array-container\" id=\"whole\">\n                    {this.state.array.map((value, id) => (\n                        <div\n                            className=\"array-bar\" \n                            id=\"element\"\n                            key={id} \n                            style={{height: value}}\n                        >\n                        </div>\n                    ))}\n                </div>\n                \n               \n            </div>\n        )\n    }\n}\n\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() *  (max - min + 1) + min);\n}\n\n\nfunction testingAlgorithm(array1, array2){\n    let i;\n    if(array1.length === array2.length){\n        for(i = 0; i < array1.length; i++){\n            if(array1[i] !== array2[i]){\n                return false\n            }\n        }\n        if(i === array1.length){\n            return true;\n        }\n    }\n    else{\n        return false\n    }\n}\n\nexport default Sorting;","import React from 'react';\nimport './App.css';\nimport Sorting from \"./Sorting/Sorting\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Sorting></Sorting>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n//  <React.StrictMode>\n    <App />,\n//  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}